{"version":3,"sources":["index.js"],"names":["cropper","SquareImageMaker","useEffect","buildCropper","cropBox","document","getElementById","cropPreview","Cropper","aspectRatio","minCropBoxWidth","dragMode","cropBoxMovable","crop","debounce","canvas","getCroppedCanvas","minWidth","maxWidth","imageSmoothingQuality","src","toDataURL","id","className","type","accept","name","onChange","e","preventDefault","upload","target","files","length","querySelector","endsWith","destroy","alt","reader","FileReader","onload","r","result","readAsDataURL","alert","hidden","process","style","onClick","answer","prompt","downloadAnchor","setAttribute","href","download","ReactDOM","render"],"mappings":"qLAAA,2EAOIA,GAPJ,YAOc,IAERC,EAAmB,WACvBC,qBAAW,WACLC,MACF,IAGJ,IAAMA,EAAe,WACnB,IAAIC,EAAUC,SAASC,eAAe,aAClCC,EAAcF,SAASC,eAAe,eAC1CN,EAAU,IAAIQ,IAAQJ,EAAS,CAC3BK,YAAa,EACbC,gBAAiB,IACjBC,SAAU,OACVC,gBAAgB,EAChBC,KAAMC,KAAS,WACb,IAAIC,EAASf,EAAQgB,iBAAiB,CACpCC,SAAU,IACVC,SAAU,KACVC,sBAAuB,SAEzBZ,EAAYa,IAAML,EAAOM,UAAU,eAClC,MAkCT,OACE,yBAAKC,GAAG,oBASN,yBAAKA,GAAG,iBACF,uEACA,2BAAOC,UAAU,gBACf,4BAAI,uBAAGA,UAAU,4BAAjB,WACA,2BAAOD,GAAG,cAAcE,KAAK,OAAOC,OAAO,aAAaC,KAAK,QAAQC,SA7C7D,SAACC,GACjBA,EAAEC,iBACF,IAAIC,EAASF,EAAEG,OAAOC,MACtB,GAAqB,IAAlBF,EAAOG,OAAV,CACA,IAAI7B,EAAUC,SAAS6B,cAAc,cAErC,GAAIJ,EAAO,GAAGJ,KAAKS,SAAS,SAAYL,EAAO,GAAGJ,KAAKS,SAAS,QAAhE,CAKAnC,EAAQoC,UAERhC,EAAQiC,IAAK,mBACbjC,EAAQgB,IAAM,GACd,IAAIkB,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAAAC,GACZrC,EAAQiC,IAAK,sBACbjC,EAAQgB,IAAMqB,EAAEV,OAAOW,OACvBvC,KAEJmC,EAAOK,cAAcb,EAAO,SAd1Bc,MAAM,wCAsC4FC,QAAM,MAG1G,yBAAKvB,GAAG,mBACN,wBAAIC,UAAU,cAAd,kBACA,wBAAIA,UAAU,eAAd,YAGF,yBAAKD,GAAG,kBACN,yBAAKC,UAAU,WACb,yBAAKD,GAAG,YAAYF,IAAK0B,qCAA4CT,IAAI,mBAE3E,yBAAKd,UAAU,aAAawB,MAAQ,CAAC,QAAW,UAC9C,yBAAKzB,GAAG,cAAcF,IAAK0B,qCAA4CT,IAAI,sBAI/E,yBAAKf,GAAG,iBACN,wEACA,uBAAGA,GAAG,qBAAqBC,UAAU,eAAeyB,QAxCxC,WAChB,IAAIC,EAASC,OAAO,sBAAuB,OAC3CC,EAAiB9C,SAASC,eAAe,sBACzC6C,EAAeC,aAAa,OAAQ/C,SAASC,eAAe,eAAec,KAC3E+B,EAAeC,aAAa,WAAYH,IAoCoCF,MAAQ,CAAC,gBAAmB,SAAWM,KAAK,QAAQC,SAAS,IACnI,4BAAI,uBAAG/B,UAAU,8BAAjB,iBAQVgC,IAASC,OAAO,kBAACvD,EAAD,MAAsBI,SAASC,eAAe,W","file":"static/js/main.03a970a8.chunk.js","sourcesContent":["import ReactDOM from 'react-dom';\nimport React, {useEffect} from 'react';\nimport Cropper from 'cropperjs';\nimport debounce from 'lodash/debounce';\nimport './index.css';\nimport '../node_modules/cropperjs/dist/cropper.css'\n\nlet cropper = ''\n\nconst SquareImageMaker = () => {\n  useEffect( () => {\n        buildCropper();\n    },[]);\n\n\n  const buildCropper = () => {\n    let cropBox = document.getElementById('cropImage')\n    let cropPreview = document.getElementById('cropPreview')\n    cropper = new Cropper(cropBox, {\n        aspectRatio: 1,\n        minCropBoxWidth: 100,\n        dragMode: 'move',\n        cropBoxMovable: false,\n        crop: debounce(() => {\n          let canvas = cropper.getCroppedCanvas({\n            minWidth: 800,\n            maxWidth: 1200,\n            imageSmoothingQuality: 'high'\n          })\n          cropPreview.src = canvas.toDataURL('image/png')\n        }, 5)\n      });\n  }\n  const makeCropper = (e) => {\n      e.preventDefault()\n      let upload = e.target.files;\n      if(upload.length === 0) return;\n      let cropBox = document.querySelector('#cropImage');\n\n      if(!upload[0].name.endsWith('.jpg') && !upload[0].name.endsWith('.png')) {\n        alert('Please select a .jpg or .png file.')\n        return\n      }\n\n      cropper.destroy()\n\n      cropBox.alt= 'Loading Image...'\n      cropBox.src = '';\n      let reader = new FileReader();\n      reader.onload = r => {\n          cropBox.alt= 'Image Editor Canvas'\n          cropBox.src = r.target.result;\n          buildCropper();\n          };\n      reader.readAsDataURL(upload[0]);\n  };\n\n  const getAnswer = () => {\n    let answer = prompt(\"What is the answer?\", \"???\"),\n    downloadAnchor = document.getElementById('downloadLinkTarget');\n    downloadAnchor.setAttribute('href', document.getElementById('cropPreview').src);\n    downloadAnchor.setAttribute('download', answer);\n};\n\n  return (\n    <div id='SquareImageMaker'>\n    {/*  <header>\n        <picture>\n          <source media='(max-width: 749px)' srcSet={process.env.PUBLIC_URL + '/headerSmall.png'} />\n          <source media='(min-width: 750px)' srcSet={process.env.PUBLIC_URL + '/headerLarge.png'} />\n          <img src={process.env.PUBLIC_URL + '/headerLarge.png'} alt='Banner' />\n        </picture>\n      </header>\n */}\n      <div id='infoContainer'>\n            <p>Upload an image from your device or URL.</p>\n            <label className='actionButton'>\n              <h2><i className=\"fas fa-cloud-upload-alt\"></i> UPLOAD</h2>\n              <input id='photoUpload' type='file' accept='.png, .jpg' name='photo' onChange={makeCropper} hidden />\n            </label>\n      </div>\n      <div id='headerContainer'>\n        <h3 className='headerLeft'>Drag/Zoom/Crop</h3>\n        <h3 className='headerRight'>Preview</h3>\n      </div>\n\n      <div id='imageContainer'>\n        <div className='cropBox'>\n          <img id='cropImage' src={process.env.PUBLIC_URL + '/startImage.png'} alt='Editor Canvas' />\n        </div>\n        <div className='previewBox' style={ {'display': 'block'} }>\n          <img id='cropPreview' src={process.env.PUBLIC_URL + '/startImage.png'} alt='Cropped Preview' />\n        </div>\n      </div>\n\n      <div id='infoContainer'>\n        <p>Save with a name that matches this image!</p>\n        <a id='downloadLinkTarget' className='actionButton' onClick={getAnswer} style={ {'backgroundColor': 'green'} } href='/null' download='' >\n          <h2><i className=\"fas fa-cloud-download-alt\"></i> DOWNLOAD</h2>\n        </a>\n      </div>\n\n    </div>\n  );\n}\n\nReactDOM.render(<SquareImageMaker />, document.getElementById('root'));\n"],"sourceRoot":""}